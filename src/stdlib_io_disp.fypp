#:include "common.fypp"
#:set RIL_KINDS_TYPES = REAL_KINDS_TYPES + INT_KINDS_TYPES + LOG_KINDS_TYPES

submodule (stdlib_io) stdlib_io_disp

    use stdlib_strings, only: to_string
    use stdlib_string_type, only: char
    use, intrinsic :: iso_fortran_env, only: output_unit
    implicit none
    
    character(len=*), parameter :: fmt_r = '(*(g12.4, 1x))'
    character(len=*), parameter :: fmt_c = '(*(g25.0, 1x))'
    character(len=*), parameter :: format_ = 'g0.4'
    integer, parameter :: brief_col = 5
    integer, parameter :: brief_row = 5
    integer, parameter :: default_col = 10
    integer, parameter :: default_row = 50
    
contains
    
    #:for k1, t1 in RIL_KINDS_TYPES
    !> Display a/an ${t1}$ scalar.
    module procedure disp_0_${t1[0]}$${k1}$
        integer :: unit_

        unit_ = optval(unit, output_unit)

        if (present(header)) write(unit_, *) header
        write(unit_, fmt_r) value

    end procedure disp_0_${t1[0]}$${k1}$

    !> Display a/an ${t1}$ vector.
    module procedure disp_1_${t1[0]}$${k1}$
        integer :: unit_
        logical :: brief_
        integer :: m, col
        
        unit_  = optval(unit, output_unit)
        brief_ = optval(brief, .true.)
        col    = merge(brief_col, default_col, present(brief) .and. brief_)
        m      = size(value, 1)

        if (present(header)) write(unit_, *) header
        write(unit_, *) '[vector size: ' // to_string(m) // ']'
        if (brief_ .and. m > col) then
            !> Brief Print.
            write(unit_, fmt_r) value(1:col-2), '...', value(m)
        else
            !> Full Print.
            write(unit_, fmt_r) value(:)
        end if

    end procedure disp_1_${t1[0]}$${k1}$

    !> Display a/an ${t1}$ matrix.
    module procedure disp_2_${t1[0]}$${k1}$
        integer :: unit_
        logical :: brief_
        integer :: i, m, n
        integer :: col, row
        character(len=1) :: colon(default_col)

        unit_  = optval(unit, output_unit)
        brief_ = optval(brief, .true.)
        col    = merge(brief_col, default_col, present(brief) .and. brief_)
        row    = merge(brief_row, default_row, present(brief) .and. brief_)
        m      = size(value, 1)
        n      = size(value, 2)

        if (present(header)) write(unit_, *) header
        write(unit_, *) '[matrix size: ' // to_string(m) // '×' // to_string(n) // ']'
        if (brief_ .and. (m > col .or. n > row)) then
            !> Brief Print.
            colon = ':'
            if (m > col .and. n > row) then
                do i = 1, row-2
                    write(unit_, fmt_r) value(i,1:col-2), '...', value(i,n)
                end do
                write(unit_, fmt_r) colon(1:col)
                write(unit_, fmt_r) value(m,1:col-2), '...', value(m,n)
            elseif (m > col .and. n <= row) then
                do i = 1, 3
                    write(unit_, fmt_r) value(i,:)
                end do
                write(unit_, fmt_r) colon(1:n)
                write(unit_, fmt_r) value(m,:)
            elseif (m <= col .and. n > row) then
                do i = 1, m
                    write(unit_, fmt_r) value(i,1:col-2), '...', value(i,n)
                end do
            end if
        else
            !> Full Print.
            do i = 1, m
                write(unit_, fmt_r) value(i,:)
            end do
        end if

    end procedure disp_2_${t1[0]}$${k1}$
    #:endfor

    #:for k1, t1 in CMPLX_KINDS_TYPES
    !> Display a ${t1}$ scalar.
    module procedure disp_0_${t1[0]}$${k1}$
        integer :: unit_

        unit_  = optval(unit, output_unit)

        if (present(header)) write(unit_, *) header
        write(unit_, fmt_c) to_string(value, format_)

    end procedure disp_0_${t1[0]}$${k1}$

    !> Display a ${t1}$ vector.
    module procedure disp_1_${t1[0]}$${k1}$
        integer :: unit_
        logical :: brief_
        integer :: i, m, col

        unit_  = optval(unit, output_unit)
        brief_ = optval(brief, .true.)
        col    = merge(brief_col, default_col, present(brief) .and. brief_)
        m      = size(value, 1)

        if (present(header)) write(unit_, *) header
        write(unit_, *) '[vector size: ' // to_string(m) // ']'
        if (brief_ .and. m > col) then
            !> Brief Print.
            write(unit_, fmt_c) (to_string(value(i), format_), i=1, col-2), &
                          '...', to_string(value(m), format_)
        else
            !> Full Print.
            write(unit_, fmt_c) (to_string(value(i), format_), i=1, m)
        end if

    end procedure disp_1_${t1[0]}$${k1}$

    !> Display a ${t1}$ matrix.
    module procedure disp_2_${t1[0]}$${k1}$
        integer :: unit_
        logical :: brief_
        integer :: i, j, m, n
        integer :: col, row
        character(len=1) :: colon(default_col)

        unit_  = optval(unit, output_unit)
        brief_ = optval(brief, .true.)
        col    = merge(brief_col, default_col, present(brief) .and. brief_)
        row    = merge(brief_row, default_row, present(brief) .and. brief_)
        m      = size(value, 1)
        n      = size(value, 2)

        if (present(header)) write(unit_, *) header
        write(unit_, *) '[matrix size: ' // to_string(m) // '×' // to_string(n) // ']'
        if (brief_ .and. (m > col .or. n > row)) then
            !> Brief Print.
            colon = ':'
            if (m > col .and. n > row) then
                do i = 1, col-2
                    write(unit_, fmt_c) (to_string(value(i,j), format_), j=1, col-2), &
                                  '...', to_string(value(i,n), format_)
                end do
                write(unit_, fmt_c) colon(1:col)
                write(unit_, fmt_c) (to_string(value(m,j), format_), j=1, col-2), &
                              '...', to_string(value(m,n), format_)
            elseif (m > col .and. n <= row) then
                do i = 1, col-2
                    write(unit_, fmt_c) (to_string(value(i,j), format_), j=1, n)
                end do
                write(unit_, fmt_c) colon(1:n)
                write(unit_, fmt_c) (to_string(value(m,j), format_), j=1, n)
            elseif (m <= col .and. n > row) then
                do i = 1, m
                    write(unit_, fmt_c) (to_string(value(m,j), format_), j=1, col-2), &
                                  '...', to_string(value(m,n), format_)
                end do
            end if
        else
            !> Full Print.
            do i = 1, m
                write(unit_, fmt_c) (to_string(value(i,j), format_), j=1, n)
            end do
        end if

    end procedure disp_2_${t1[0]}$${k1}$
    #:endfor

    !> Display a `character` scalar.
    module procedure disp_character
        character(len=:), allocatable :: value_
        integer :: unit_

        value_ = optval(value, '')
        unit_  = optval(unit, output_unit)

        if (present(header)) write(unit_, *) header
        write(unit_, *) value_

    end procedure disp_character

    !> Display a `string_type` scalar
    module procedure disp_string_type
        integer :: unit_

        unit_ = optval(unit, output_unit)

        if (present(header)) write(unit_, *) header
        write(unit_, *) char(value)
            !!\TODO: Need to improve ?

    end procedure disp_string_type

end submodule stdlib_io_disp
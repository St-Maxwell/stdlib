#:include "common.fypp"
#:set RIL_KINDS_TYPES = REAL_KINDS_TYPES + INT_KINDS_TYPES + LOG_KINDS_TYPES

submodule (stdlib_io) stdlib_io_disp

    use, non_intrinsic :: stdlib_strings, only: format_string
    implicit none
    character(len=*), parameter :: fmt_r = '(*(g11.4, 1x))'
    character(len=*), parameter :: fmt_c = '(*(g23.4, 1x))'
    
contains
    
    #:for kind, type in RIL_KINDS_TYPES
    module procedure disp_0_${type[0]}$${kind}$
        if(present(string)) print *, trim(string)
        print fmt_r, val
    end procedure disp_0_${type[0]}$${kind}$

    module procedure disp_1_${type[0]}$${kind}$
        integer :: i, m
        m = size(val)
        if(present(string)) print *, trim(string)
        print fmt_r, (val(i), i=1,m)
    end procedure disp_1_${type[0]}$${kind}$

    module procedure disp_2_${type[0]}$${kind}$
        integer :: i, j, m, n
        m = size(val, 1)
        n = size(val, 2)
        if(present(string)) print *, trim(string)
        do i = 1, m
            print fmt_r, (val(i,j), j=1, n)
        end do
    end procedure disp_2_${type[0]}$${kind}$

    module procedure disp_3_${type[0]}$${kind}$
        integer :: i, dim1, dim2, dim3
        dim1 = size(val, 1)
        dim2 = size(val, 2)
        dim3 = size(val, 3)
        if(present(string)) print *, trim(string)
        if(dim == 1) then
            do i = 1, dim1
                print *, 'Slice ('//format_string(i)//',:,:):'
                call disp_2_${type[0]}$${kind}$(val(i, :, :))
            end do
        elseif(dim == 2) then
            do i = 1, dim2
                print *, 'Slice (:,'//format_string(i)//',:):'
                call disp_2_${type[0]}$${kind}$(val(:, i, :))
            end do
        elseif (dim == 3) then
            do i = 1, dim3
                print *, 'Slice (:,:,'//format_string(i)//'):'
                call disp_2_${type[0]}$${kind}$(val(:, :, i))
            end do
        else
            call error_stop('Error(disp): wrong dimension')
        end if
    end procedure disp_3_${type[0]}$${kind}$
    #:endfor

    #:for kind, type in CMPLX_KINDS_TYPES
    module procedure disp_0_${type[0]}$${kind}$
        if(present(string)) print *, trim(string)
        print fmt_c, format_string(cmplx(real(val), &
                                         aimag(val)), '(g11,4)')
    end procedure disp_0_${type[0]}$${kind}$

    module procedure disp_1_${type[0]}$${kind}$
        integer :: i, m
        m = size(val)
        if(present(string)) print *, trim(string)
        print fmt_c, (format_string(cmplx(real(val(i)), &
                        aimag(val(i))), '(g11.4)'), i=1, m)
    end procedure disp_1_${type[0]}$${kind}$

    module procedure disp_2_${type[0]}$${kind}$
        integer :: i, j, m, n
        m = size(val, 1)
        n = size(val, 2)
        if(present(string)) print *, trim(string)
        do i = 1, m
            print fmt_c, (format_string(cmplx(real(val(i, j)), &
                            aimag(val(i, j))), '(g11.4)'), j=1, n)
        end do
    end procedure disp_2_${type[0]}$${kind}$

    module procedure disp_3_${type[0]}$${kind}$
        integer :: i, dim1, dim2, dim3
        dim1 = size(val, 1)
        dim2 = size(val, 2)
        dim3 = size(val, 3)
        if(present(string)) print *, trim(string)
        if(dim == 1) then
            do i = 1, dim1
                print *, 'Slice ('//format_string(i)//',:,:):'
                call disp_2_${type[0]}$${kind}$(val(i, :, :))
            end do
        elseif(dim == 2) then
            do i = 1, dim2
                print *, 'Slice (:,'//format_string(i)//',:):'
                call disp_2_${type[0]}$${kind}$(val(:, i, :))
            end do
        elseif (dim == 3) then
            do i = 1, dim3
                print *, 'Slice (:,:,'//format_string(i)//'):'
                call disp_2_${type[0]}$${kind}$(val(:, :, i))
            end do
        else
            call error_stop('Error(disp): wrong dimension')
        end if
    end procedure disp_3_${type[0]}$${kind}$
    #:endfor

    module procedure disp_str
        if(present(string)) print *, trim(string)
        if(present(val)) then
            print *, trim(val)
        else
            print *, ''
        end if
    end procedure disp_str

end submodule stdlib_io_disp
#:include "common.fypp"
#:set RIL_KINDS_TYPES = REAL_KINDS_TYPES + INT_KINDS_TYPES + LOG_KINDS_TYPES
submodule (stdlib_strings) stdlib_strings_format_string

    implicit none
    integer, parameter :: buffer_len = 512

contains

    #:for kind, type in RIL_KINDS_TYPES
    module procedure format_string_${type[0]}$${kind}$
        !! Format ${type}$ variable as character sequence
        character(len=buffer_len) :: buffer
        integer :: stat

        write(buffer, optval(fmt, "(g0)"), iostat=stat) val
        if (stat == 0) then
            string = trim(buffer)
        else
            string = '*'
                !!\TODO: *?
        end if

    end procedure format_string_${type[0]}$${kind}$
    #:endfor

    #:for kind, type in CMPLX_KINDS_TYPES
    module procedure format_string_${type[0]}$${kind}$
        !! Format ${type}$ variable as character sequence

        string = '('//format_string_r${kind}$(val%re, fmt)//','// &
            format_string_r${kind}$(val%im, fmt)//')'

    end procedure format_string_${type[0]}$${kind}$
    #:endfor

end submodule stdlib_strings_format_string
